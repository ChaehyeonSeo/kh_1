/*
 *	EMPLOYEES의 HIRE_DATE 열의 값을 +10년 하여 수정한다.
 */
UPDATE EMPLOYEES SET HIRE_DATE = ADD_MONTHS(HIRE_DATE, 120) ;

/*
 *	JOBS 테이블과 동일한 구조의 KJOBS 테이블을 만들고 JOB_TITLE 열의 값을
 *	한글로 번역하여 수정한다.
 *	단, MIN_SALARY, MAX_SALARY 컬럼은 만들 필요 없음.
 */
CREATE TABLE KJOBS
AS
SELECT *
  FROM JOBS;

UPDATE KJOBS SET JOB_TITLE = '대통령' WHERE JOB_ID = 'AD_PRES';
UPDATE KJOBS SET JOB_TITLE = '부통령' WHERE JOB_ID = 'AD_VP';
UPDATE KJOBS SET JOB_TITLE = '보좌진' WHERE JOB_ID = 'AD_ASST';
UPDATE KJOBS SET JOB_TITLE = '재무관리자' WHERE JOB_ID = 'FI_MGR';
UPDATE KJOBS SET JOB_TITLE = '회계사' WHERE JOB_ID = 'FI_ACCOUNT';
UPDATE KJOBS SET JOB_TITLE = '회계관리자' WHERE JOB_ID = 'AC_MGR';
UPDATE KJOBS SET JOB_TITLE = '공인회계사' WHERE JOB_ID = 'AC_ACCOUNT';
UPDATE KJOBS SET JOB_TITLE = '판매관리자' WHERE JOB_ID = 'SA_MAN';
UPDATE KJOBS SET JOB_TITLE = '판매대리인' WHERE JOB_ID = 'SA_REP';
UPDATE KJOBS SET JOB_TITLE = '구매부장' WHERE JOB_ID = 'PU_MAN';
UPDATE KJOBS SET JOB_TITLE = '구매담당자' WHERE JOB_ID = 'PU_CLERK';
UPDATE KJOBS SET JOB_TITLE = '재고관리자' WHERE JOB_ID = 'ST_MAN';
UPDATE KJOBS SET JOB_TITLE = '재고담당자' WHERE JOB_ID = 'ST_CLERK';
UPDATE KJOBS SET JOB_TITLE = '발송담당자' WHERE JOB_ID = 'SH_CLERK';
UPDATE KJOBS SET JOB_TITLE = '프로그래머' WHERE JOB_ID = 'IT_PROG';
UPDATE KJOBS SET JOB_TITLE = '마케팅관리자' WHERE JOB_ID = 'MK_MAN';
UPDATE KJOBS SET JOB_TITLE = '마케팅책임자' WHERE JOB_ID = 'MK_REP';
UPDATE KJOBS SET JOB_TITLE = '인사담당자' WHERE JOB_ID = 'HR_REP';
UPDATE KJOBS SET JOB_TITLE = '홍보담당자' WHERE JOB_ID = 'PR_REP';

/*
 * 	DEPARTMENTS 테이블에 DEPARTMENT_NAME_KR 컬럼을 추가 후 DEPARTMENT_NAME을
 * 	한글로 번역한 데이터가 수정되게 한다.
 */
ALTER TABLE DEPARTMENTS ADD DEPARTMENT_NAME_KR VARCHAR(20);
SELECT * FROM DEPARTMENTS ;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '행정' WHERE DEPARTMENT_ID = 10;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '마케팅' WHERE DEPARTMENT_ID = 20;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '구매' WHERE DEPARTMENT_ID = 30;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '인사' WHERE DEPARTMENT_ID = 40;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '배송' WHERE DEPARTMENT_ID = 50;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '정보통신' WHERE DEPARTMENT_ID = 60;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '대민관계' WHERE DEPARTMENT_ID = 70;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '영업' WHERE DEPARTMENT_ID = 80;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '경영' WHERE DEPARTMENT_ID = 90;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '자금' WHERE DEPARTMENT_ID = 100;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '회계' WHERE DEPARTMENT_ID = 110;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '재무' WHERE DEPARTMENT_ID = 120;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '법인세' WHERE DEPARTMENT_ID = 130;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '신용관리' WHERE DEPARTMENT_ID = 140;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '주주서비스' WHERE DEPARTMENT_ID = 150;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '수당' WHERE DEPARTMENT_ID = 160;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '제조' WHERE DEPARTMENT_ID = 170;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '건설' WHERE DEPARTMENT_ID = 180;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '계약' WHERE DEPARTMENT_ID = 190;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '운영' WHERE DEPARTMENT_ID = 200;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '기술지원' WHERE DEPARTMENT_ID = 210;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '네트워크운영' WHERE DEPARTMENT_ID = 220;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = 'IT업무지원' WHERE DEPARTMENT_ID = 230;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '정부판매' WHERE DEPARTMENT_ID = 240;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '소매판매' WHERE DEPARTMENT_ID = 250;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '채용' WHERE DEPARTMENT_ID = 260;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '급여' WHERE DEPARTMENT_ID = 270;

/*
 * 	KJOBS 테이블에 한글로 번역한 직무 타이틀을 JOBS 테이블에 
 * 	JOB_TITLE_KR 컬럼을 추가 후 수정이 되도록 한다.
 *	(DEPARTMENTS 테이블처럼 하나의 테이블에 영문/한글이 모두 들어가게 한다)
 *	모든 작업을 완료 후 KJOBS 테이블은 제거한다.
 */
ALTER TABLE JOBS ADD JOB_TITLE_KR VARCHAR(30);
UPDATE JOBS 
   SET JOB_TITLE_KR = (SELECT KJOBS.JOB_TITLE
   						 FROM KJOBS
   						WHERE JOBS.JOB_ID = KJOBS.JOB_ID);
DROP TABLE KJOBS;

/*
 *	JOBS 테이블에 다음의 데이터를 추가한다. (JOB_TITLE_KR도 추가되어 있어야 함)
 *		JOB_ID		JOB_TITLE			MIN_SALARY	MAX_SALARY
 *		IT_ITRN		Intern Programmer	3200		3800
 *		SV_MGR		Server Manager		4000		10000
 *		SV_ENG		Server Engineer		6000		12000
 *		NT_MGR		Network Manager		5000		11000
 *		NT_ENG		Network Engineer	7000		13000
 */
SELECT * FROM JOBS;
INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY)
	 VALUES ('IT_ITRN', 'Intern Programmer', 3200, 3800);
INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY)
	 VALUES ('SV_MGR', 'Server Manager', 4000, 10000);
INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY)
	 VALUES ('SV_ENG', 'Server Engineer', 6000, 12000);
INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY)
	 VALUES ('NT_MGR', 'Network Manager', 5000, 11000);
INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY)
	 VALUES ('NT_ENG', 'Network Engineer', 7000, 13000);
UPDATE JOBS SET JOB_TITLE_KR = '인턴개발자' WHERE JOB_ID = 'IT_ITRN';
UPDATE JOBS SET JOB_TITLE_KR = '서버관리자' WHERE JOB_ID = 'SV_MGR';
UPDATE JOBS SET JOB_TITLE_KR = '서버엔지니어' WHERE JOB_ID = 'SV_ENG';
UPDATE JOBS SET JOB_TITLE_KR = '네트워크관리자' WHERE JOB_ID = 'NT_MGR';
UPDATE JOBS SET JOB_TITLE_KR = '네트워크엔지니어' WHERE JOB_ID = 'NT_ENG';

/*
 *	DEPARTMENTS 테이블에 다음의 데이터를 추가한다.(DEPARTMENT_NAME_KR도 추가되어 있어야 함)
 *		DEPARTMENT_ID	DEPARTMENT_NAME	MANAGER_ID	LOCATION_ID
 *		280				Server			NULL		3000
 *		290				Network			NULL		3000
 */
INSERT INTO DEPARTMENTS(DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID)
	 VALUES (280, 'Server', NULL, 3000);
INSERT INTO DEPARTMENTS(DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID)
	 VALUES (290, 'Network', NULL, 3000);
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '서버' WHERE DEPARTMENT_ID = 280;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '네트워크' WHERE DEPARTMENT_ID = 290;

/*
 *	새로 신설된 Server, Network 부서를 위한 인력을 충원하고 있는 것으로 가정하여
 *	각 부서마다 3명의 인원을 EMPLOYEES에 추가한다. (Manager 직무 1명, Engineer 직무 2명)
 *		- 초기에 모든 인원은 JOBS 테이블의 MIN_SALARY의 급여를 받는 것으로 한다.
 *		- Server, Network 부서에 인원을 추가할 때 반드시 1명의 부서장이 필요하기 때문에
 *		  인원 중 1명을 부서장으로 만든다.
 *		  (DEPARTMENTS 테이블의 MANAGER_ID를 설정한다.)
 *		- 부서장으로 선택된 인원은 JOBS 테이블의 MIN_SALARY 급여에서 +2000 상승된 급여로
 *		  받을 수 있게 데이터를 수정한다.
 */
SELECT COLUMN_NAME, DATA_TYPE, NULLABLE FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'EMPLOYEES';
INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, HIRE_DATE, DEPARTMENT_ID, JOB_ID, SALARY)
	 VALUES ((SELECT (MAX(EMPLOYEE_ID) + 1)), 'Server', 'Manager', 'SMANAGER', TO_DATE('20221122'), 280, 'SV_MGR', 
	 (SELECT JOBS.MIN_SALARY 
	    FROM JOBS
	   WHERE JOB_ID = 'SV_MGR'));
INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, HIRE_DATE, DEPARTMENT_ID, JOB_ID, SALARY)
	 VALUES ((SELECT (MAX(EMPLOYEE_ID) + 1)), 'Server', 'Engineer1', 'SENGINEER1', TO_DATE('20221122'), 280, 'SV_ENG', 
	 (SELECT JOBS.MIN_SALARY 
	    FROM JOBS
	   WHERE JOB_ID = 'SV_ENG'));
INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, HIRE_DATE, DEPARTMENT_ID, JOB_ID, SALARY)
	 VALUES ((SELECT (MAX(EMPLOYEE_ID) + 1)), 'Server', 'Engineer2', 'SENGINEER2', TO_DATE('20221122'), 280, 'SV_ENG', 
	 (SELECT JOBS.MIN_SALARY 
	    FROM JOBS
	   WHERE JOB_ID = 'SV_ENG'));
INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, HIRE_DATE, DEPARTMENT_ID, JOB_ID, SALARY)
	 VALUES ((SELECT (MAX(EMPLOYEE_ID) + 1)), 'Network', 'Manager', 'NMANAGER', TO_DATE('20221122'), 290, 'NT_MGR', 
	 (SELECT JOBS.MIN_SALARY 
	    FROM JOBS
	   WHERE JOB_ID = 'NT_MGR'));
INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, HIRE_DATE, DEPARTMENT_ID, JOB_ID, SALARY)
	 VALUES ((SELECT (MAX(EMPLOYEE_ID) + 1)), 'Network', 'Engineer1', 'NENGINEER1', TO_DATE('20221122'), 290, 'NT_ENG', 
	 (SELECT JOBS.MIN_SALARY 
	    FROM JOBS
	   WHERE JOB_ID = 'NT_ENG'));
INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, HIRE_DATE, DEPARTMENT_ID, JOB_ID, SALARY)
	 VALUES ((SELECT (MAX(EMPLOYEE_ID) + 1)), 'Network', 'Engineer2', 'NENGINEER2', TO_DATE('20221122'), 290, 'NT_ENG', 
	 (SELECT JOBS.MIN_SALARY 
	    FROM JOBS
	   WHERE JOB_ID = 'NT_ENG'));

UPDATE DEPARTMENTS
   SET MANAGER_ID = 207
 WHERE DEPARTMENT_ID = 280;
UPDATE DEPARTMENTS 
   SET MANAGER_ID = 210
 WHERE DEPARTMENT_ID = 290;

UPDATE EMPLOYEES SET MANAGER_ID = (SELECT MANAGER_ID
									 FROM DEPARTMENTS D
									WHERE EMPLOYEES.DEPARTMENT_ID = D.DEPARTMENT_ID);

UPDATE EMPLOYEES
   SET SALARY = (SELECT JOBS.MIN_SALARY + 2000
	 			   FROM JOBS
			      WHERE EMPLOYEES.JOB_ID = JOBS.JOB_ID)
 WHERE JOB_ID IN ('SV_MGR', 'NT_MGR');

/*
 *	물가상승분을 반영하여 모든 급여 정보를 수정하려고 한다.
 *	JOBS 테이블과 EMPLOYEES 테이블의 모든 급여 정보를 기존보다 5% ~ 10% 상승시키도록 한다.
 *		- 급여가 4000 미만인 경우 10% 상승
 *		- 급여가 4000 이상 8000 미만인 경우 8% 상승
 *		- 급여가 8000 이상 12000 미만인 경우 6% 상승
 *		- 급여가 12000 이상인 경우 5% 상승
 *		- 정수 1번째 자리에서 절삭할 것. 예) 4333.333은 4330으로 절삭
 */
UPDATE EMPLOYEES 
   SET SALARY = (SELECT CASE WHEN SALARY < 4000 THEN TRUNC(SALARY * 1.1, -1)
   			 	 	 	 	 WHEN SALARY < 8000 THEN TRUNC(SALARY * 1.08, -1)
   				     		 WHEN SALARY < 12000 THEN TRUNC(SALARY * 1.06, -1)
   					 		 ELSE TRUNC(SALARY * 1.05, -1)
   					 		 END AS SALARY
   				   FROM EMPLOYEES E
   				  WHERE E.EMPLOYEE_ID = EMPLOYEES.EMPLOYEE_ID);

UPDATE JOBS 
   SET (MIN_SALARY, MAX_SALARY) = (SELECT CASE WHEN MIN_SALARY < 4000 THEN TRUNC(MIN_SALARY * 1.1, -1)
   			 	 	 	 					   WHEN MIN_SALARY < 8000 THEN TRUNC(MIN_SALARY * 1.08, -1)
   				     						   WHEN MIN_SALARY < 12000 THEN TRUNC(MIN_SALARY * 1.06, -1)
   					 						   ELSE TRUNC(MIN_SALARY * 1.05, -1)
   					 					   END AS MIN_SALARY
   					 					, CASE WHEN MAX_SALARY < 4000 THEN TRUNC(MAX_SALARY * 1.1, -1)
   			 	 	 	 					   WHEN MAX_SALARY < 8000 THEN TRUNC(MAX_SALARY * 1.08, -1)
   				     						   WHEN MAX_SALARY < 12000 THEN TRUNC(MAX_SALARY * 1.06, -1)
   					 						   ELSE TRUNC(MAX_SALARY * 1.05, -1)
   					 					   END AS MAX_SALARY
   				  					 FROM JOBS J
   				  WHERE J.JOB_ID  = JOBS.JOB_ID);
   				 
/*
 *	사내 공지를 위한 게시판 기능을 추가하려 한다. 다음의 요구사항에 맞추어 테이블을 생성하고
 *	첫번째 공지를 작성하도록 한다. (첫 공지는 모든 부서가 열람할 수 있게 한다)
 *		- 공지 게시판은 부서별 공지와 전체 공지로 나누어져 운영되어야 한다.
 *		- 전체 공지는 모든 부서가 확인할 수 있는 공지이며 부서별 공지는 지정한 부서에
 *		  소속된 사원만 볼 수 있는 공지이다.
 *		- 공지를 작성할 때 다음의 정보가 저장되어야 한다.
 *			번호, 제목, 내용, 작성일자, 부서ID
 */
CREATE TABLE 부서별공지 (
	   번호	NUMBER	
	 , 제목	VARCHAR(10 CHAR)
	 , 내용 VARCHAR(100 CHAR)
	 , 작성일자 DATE
	 , 부서ID NUMBER
);
CREATE TABLE 전체공지 (
	   번호	NUMBER
	 , 제목	VARCHAR(10 CHAR)
	 , 내용 VARCHAR(100 CHAR)
	 , 작성일자 DATE
	 , 부서ID NUMBER
);

SELECT * FROM 전체공지;
SELECT * FROM 부서별공지;
DROP TABLE 부서별공지;
DROP TABLE 전체공지;
/*
 *	사내 공지 게시판 테이블을 생성 후에 다음의 공지를 추가로 작성한다.
 *		- 모든 부서마다 'XXX 부서만 확인할 수 있는 공지입니다.' 라는 메시지를 추가한다.
 */
INSERT INTO 전체공지(번호, )


/*
 *	100번 사원이 공지를 열람한다는 가정 하에 100번 사원이 소속된 부서의 공지와 전체 공지가
 *	보일 수 있는 SELECT 쿼리문을 작성하세요.
 */
/*
 *	공지 게시판에 중요도 기능을 추가하여 가장 중요한 공지가 가장 먼저 조회될 수 있도록
 *	테이블을 수정하도록 한다.
 *		- 중요도는 1 ~ 5까지 사용할 수 있다.
 *		- 중요도를 설정하지 안흥면 기본 3으로 저장되게 한다.
 *		- 전체 공지용으로 중요도 1 ~ 5까지 총 5개의 공지 데이터를 추가한다.
 *		- 추가한 공지 데이터를 조회할 때 중요도 순으로 조회가 될 수 있도록
 *		  SELECT 구문을 작성한다.
 */